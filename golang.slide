Intro to Golang

Kevin Chen
TeslaGov
kevin@teslagovernment.com

* Goals

- Why Go?
- Compare and contrast Go and Java
- Language basics

* Go "Pros" (performance)

- Low memory footprint (2.875MiB at rest, as opposed to -Xms128m -Xmx128m)
  docker-compose up -d && docker stats clarakm-watchlist-api
- Docker image is 22 MB
- Fast to build / test / run
- Feels sub-second vs 15 second startup time).

.link https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/go.html Go vs Java benchmark
.link https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/go-node.html Go vs NodeJS
.link https://benchmarksgame-team.pages.debian.net/benchmarksgame/faster/go-python3.html Go vs Python

* Go "Pros" (libraries)

- The language facilitates easy library development.
.link https://github.com/TeslaGov?language=go TeslaGov Golang repositories
- Pull deps right from GitHub.
  go get -u -v ./...
- No Bintray learning curve (accounts, API keys, clicking "Publish")
- Versioning is as simple as tagging
- `$GOPATH` lets you live-edit libraries before you commit them

* Go "Pros" (code quality)

- Docs are managed and hosted for you
.link https://godoc.org/github.com/TeslaGov/clarakm-aws-events-go godoc
- Go report card
.link https://goreportcard.com/report/github.com/TeslaGov/clarakm-aws-events-go report card
- Automatic formatting ("spaces vs tabs" settled once and for all)
  go fmt .

* Go "Pros" (devops)

- Generates a single binary.
- No JARs, classpaths, JVM.
- No JVM tuning (e.g., Xms, Xmx)
- Easy to deploy (with or without Docker).
  go build -o ./bin/clarakm-watchlist . && ./bin/clarakm-watchlist

* Go "Pros" (minimal dependencies)

- Frameworks are optional, not necessary
- Standard library is enough to build a REST API.
- No dealing with a web framework ("no accidentally exposed REST endpoints")
- No ORM, no wrestling with Hibernate bugs ("null fields won't return child associations")
- Adequate ecosystem of libraries (official AWS SDK, JWT library, etc)
- (had one issue with SQS subscriptions, but community is abuzz)
- Testing is fast and simple. No test-utils necessary.

* Go "Pros" (language)

- Not exotic. Straightforward. Usually only one way to do things.
- Not magical. Nothing like repository.findOneByIdAndDeletedDateTimeIsNull().
- Imperative. No declarative annotations.
- Somewhat functional. Functions are first-class. (functions are like other variables).
- Interfaces. Composition over inheritance.
- Tuples. Nice error handling (no more exceptions).
- No function overloading (leads to less abstraction).
- Package-oriented rather than class-oriented (leads to fewer files).

* Go "Pros" (language links)

.link https://yourbasic.org/golang/go-vs-java/ Go vs Java, language differences
.link https://yourbasic.org/golang/generics/ No generics - what to do instead
.link http://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/ pass by pointer vs pass by value
.link https://arhipov.net/golang/2016/03/12/shallow-copying-interface-values-in-go.html creating pointer clones

* Lines of Code

Ran `tokei` on our projects

- pix 86.4k LOC for 1136 Java files
- rampart 12k LOC for 200 Java files
- page 5k LOC for 104 Java files (1.3k for 11 test files)
- ups 7k LOC for 109 Java files
- rfi 2.2k LOC for 36 Java files
- watchlist 1.5k for 14 Go files
- zendesk 908 LOC for 30 Java files
- zendesk-go 277 LOC for 6 Go files

* zendesk-go

- Easy to read / maintain.
- Quick to develop.
- Fosters agility.

.link https://github.com/TeslaGov/clarakm-zendesk clarakm-zendesk
.link https://github.com/TeslaGov/clarakm-zendesk-go clarakm-zendesk-go

* What's missing?

Go code is less declarative / less magical / more imperative.

- No declarative annotations for scheduled tasks
- No ORM (large queries for nested resources, manual TX management)
- No DB migrations
- Fewer layers (I've combined controller, security, and service layers)
- Library versioning strategy (vgo)


* Scheduled tasks
- Create a "worker" and a goroutine
  type Worker struct {
  	DB *sql.DB
  }

  func (w *Worker) Work() {
  	log.Println("working")
  }

  w := Worker{DB: db}
  go w.Work()
.link http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/ Implement a super scalable worker pool
.link https://brandur.org/go-worker-pool The Case for a Go Worker Pool
.link https://golangbot.com/buffered-channels-worker-pools/ Buffered channels and worker pools

* ORM
.link https://github.com/jinzhu/gorm gORM
.link http://gorm.io/docs/ gorm example

- gorm has auto-migrations...
- But raw SQL feels more clear
- Even though you can, at times, end up with some massive queries with lots of JOINS
.link https://github.com/TeslaGov/clarakm-watchlist/blob/master/models/page_subscription.go#L74 page_subscription.go - example queries
- you have to fetch nested associations manually
- this leads to boilerplate JOINs and boilerplate row scanning
- e.g., page_subscription.go queries scans ~25 columns w/ 3 JOINs

* DB migrations
.link https://github.com/golang-migrate/migrate migrate - DB migrations
.link https://github.com/pressly/goose goose - DB migrations

- migrate supports reading migration files from a Github repo...
- that could work nicely with our centralized seeding repo (claramk-seed)

* Resource Validation
.link https://github.com/go-ozzo/ozzo-validation using ozzo-validation

.link https://github.com/TeslaGov/clarakm-zendesk-go/blob/master/models/account_request.go#L24 ozzo-validation resource validation
  func (r *AccountRequest) Validate() error {
  	return validation.ValidateStruct(r,
  		validation.Field(&r.FirstName, validation.Required, validation.Length(1, 255)),
  		validation.Field(&r.LastName, validation.Required, validation.Length(1, 255)),
  	)
  }
.link https://github.com/TeslaGov/clarakm-zendesk-go/blob/master/models/account_request_test.go Testing resource validation
  func TestAccountRequest_Validate(t *testing.T) {
  	Convey("Given an account request", t, func() {
  		Convey("Not having a firstName should not pass validation", func() {
  			r := AccountRequest{
  				LastName: "Chen",
  			}
  			So(r.Validate(), ShouldNotBeNil)
  })

* Versioning
- Versioning happens through Git tags
- No official tool
  glide -> dep -> vgo
- Similar to how Java world has Maven, Ivy, Gradle, SBT, etc.

* Hello World

.link https://play.golang.org/p/BwvOWBtAY53 Go Playground -- functions, fmt.Printf
.code hello-world.txt

* "Objects"

.link https://play.golang.org/p/to1jaJMWG-W Go Playground -- doing "objects" with structs and receiver methods
.code objects.go

* Receiver arguments

- Receiver arguments are more inflexible
  func (d *duck) quack() {}
- Better to use function arguments (more flexible, better for testing)
  func quack(d *duck) {}
- Taking in an interface is even better
  type quacker interface {
      quack()
  }

  type duck struct{}
  var func (d *duck) quack() {}

  func foo(d quacker) {
      d.quack()
  }

.link https://grisha.org/blog/2016/09/22/golang-receiver-vs-function/ source

* Server example

.code server.txt
